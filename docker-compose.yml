version: '3.8'

services:
  # ✅ Django
  django-web:
    build:
      context: ./django-app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./django-app:/app
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=django-db
      - DB_PORT=5432
      - DB_NAME=django
      - DB_USER=django
      - DB_PASSWORD=12345
      # Kafka 서버 연결을 위한 환경 변수 설정
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - django-db
      - kafka

  # ✅ Zookeeper - Kafka의 분산 코디네이션을 담당하는 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      # Zookeeper 클라이언트 포트 설정
      ZOOKEEPER_CLIENT_PORT: 2181
      # Zookeeper의 기본 시간 단위 설정 (밀리초)
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # ✅ Kafka - 분산 스트리밍 플랫폼
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      # Kafka 브로커 ID 설정
      KAFKA_BROKER_ID: 1
      # Zookeeper 연결 설정
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Kafka 브로커의 리스너 설정 (내부/외부 통신용)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      # 리스너 보안 프로토콜 설정
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # 브로커 간 통신에 사용할 리스너 이름
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # 토픽 복제 팩터 설정 (단일 브로커이므로 1로 설정)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # ✅ PostgreSQL for Django
  django-db:
    image: postgres:15
    environment:
      POSTGRES_DB: django
      POSTGRES_USER: django
      POSTGRES_PASSWORD: 12345
    volumes:
      - django_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  # ✅ PostgreSQL for Airflow
  airflow-db:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      retries: 5

  # ✅ Redis
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  # ✅ Airflow Init
  airflow-init:
    image: apache/airflow:2.8.1
    depends_on:
      - airflow-db
      - redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:12345@airflow-db/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:12345@airflow-db/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=12345
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: version

  # ✅ Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.8.1
    depends_on:
      - airflow-init
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:12345@airflow-db/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:12345@airflow-db/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=12345
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: webserver

  # ✅ Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.8.1
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:12345@airflow-db/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:12345@airflow-db/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: scheduler

  # ✅ Airflow Worker
  airflow-worker:
    image: apache/airflow:2.8.1
    depends_on:
      - airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:12345@airflow-db/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:12345@airflow-db/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: celery worker

volumes:
  django_postgres_data:
  airflow_postgres_data: